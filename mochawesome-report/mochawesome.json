{
  "stats": {
    "suites": 0,
    "tests": 0,
    "passes": 0,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-13T01:53:54.384Z",
    "end": "2025-02-13T01:53:54.385Z",
    "duration": 1,
    "testsRegistered": 11,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 11,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "899d082e-dff6-4cfd-a2c6-4dc650940f0c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e3ee487f-bf38-4fc8-b33f-bfd5eef9a2d6",
          "title": "Build tests",
          "fullFile": "D:\\szubair\\Projects\\Automation\\MOCHA_REST\\MOCHA_REST_API_TESTING\\test\\build\\build_tests.test.ts",
          "file": "\\test\\build\\build_tests.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate GET request working fine @build",
              "fullTitle": "Build tests Validate GET request working fine @build",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "dc5d444e-836c-4181-947e-6b7f787a0ec1",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Validate POST request working fine @build",
              "fullTitle": "Build tests Validate POST request working fine @build",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "3eff798a-f62e-463d-ac67-4d4c01885eea",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Validate PUT request working fine @build",
              "fullTitle": "Build tests Validate PUT request working fine @build",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "f248f8fc-78f3-4942-a2dd-8662da9920ff",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "dc5d444e-836c-4181-947e-6b7f787a0ec1",
            "3eff798a-f62e-463d-ac67-4d4c01885eea",
            "f248f8fc-78f3-4942-a2dd-8662da9920ff"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "47b14677-7ff9-4593-aa73-26509e0f18f2",
          "title": "@addition GET API REQUEST",
          "fullFile": "D:\\szubair\\Projects\\Automation\\MOCHA_REST\\MOCHA_REST_API_TESTING\\test\\regression\\get_request.test.ts",
          "file": "\\test\\regression\\get_request.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get the list of all the users @regression",
              "fullTitle": "@addition GET API REQUEST Get the list of all the users @regression",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "5ff856da-d957-4688-a49b-f67aa09cf37f",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Get a single user details @regression",
              "fullTitle": "@addition GET API REQUEST Get a single user details @regression",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "2933cda9-3bd6-44d4-af89-63faa74d33b0",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Single user not found @regression",
              "fullTitle": "@addition GET API REQUEST Single user not found @regression",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "33b3d486-a1c1-416f-81e9-7b56c505a195",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Test to show how to find a json object based on key @regression",
              "fullTitle": "@addition GET API REQUEST Test to show how to find a json object based on key @regression",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "eabb7ae1-d352-489a-a43b-4cac22543821",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Test to show how to filter the array containing json objects @regression",
              "fullTitle": "@addition GET API REQUEST Test to show how to filter the array containing json objects @regression",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "336e3add-e791-4523-ba60-01c01c837b92",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "5ff856da-d957-4688-a49b-f67aa09cf37f",
            "2933cda9-3bd6-44d4-af89-63faa74d33b0",
            "33b3d486-a1c1-416f-81e9-7b56c505a195",
            "eabb7ae1-d352-489a-a43b-4cac22543821",
            "336e3add-e791-4523-ba60-01c01c837b92"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4d3751cb-22f6-4568-a32b-83d3e50b1e8d",
          "title": "POST API CALL",
          "fullFile": "D:\\szubair\\Projects\\Automation\\MOCHA_REST\\MOCHA_REST_API_TESTING\\test\\regression\\post_request.test.ts",
          "file": "\\test\\regression\\post_request.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Create a user using POST request",
              "fullTitle": "POST API CALL Create a user using POST request",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "b11f1ff4-9710-49a3-b128-59ba1683d88c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "b11f1ff4-9710-49a3-b128-59ba1683d88c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73a59c0a-3c9e-4b13-a3ee-8fe887e10890",
          "title": "PUT API CALL",
          "fullFile": "D:\\szubair\\Projects\\Automation\\MOCHA_REST\\MOCHA_REST_API_TESTING\\test\\regression\\put_request.test.ts",
          "file": "\\test\\regression\\put_request.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Update a user @demo",
              "fullTitle": "PUT API CALL Update a user @demo",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "6b70f287-3451-4d03-b610-f281825425c2",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "6b70f287-3451-4d03-b610-f281825425c2"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56855ea9-a213-4863-8e92-b1db2a96c5e7",
          "title": "Smoke tests",
          "fullFile": "D:\\szubair\\Projects\\Automation\\MOCHA_REST\\MOCHA_REST_API_TESTING\\test\\smoke\\smoke_tests.test.ts",
          "file": "\\test\\smoke\\smoke_tests.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Get a single user details @smoke",
              "fullTitle": "Smoke tests Get a single user details @smoke",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var context = this;\n    try {\n      var promise = fn.call(context);\n      if (promise != null && promise.then != null && promise.catch != null) {\n        return promise.catch(function(err) {\n          markRemainingTestsAndSubSuitesAsPending(context.test);\n          throw err;\n        });\n      } else {\n        return promise;\n      }\n    } catch (ex) {\n      markRemainingTestsAndSubSuitesAsPending(context.test);\n      throw ex;\n    }",
              "err": {},
              "uuid": "a342a06c-5930-4464-824d-41445966422e",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "a342a06c-5930-4464-824d-41445966422e"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "[object Object]": true
      },
      "version": "6.2.0"
    }
  }
}